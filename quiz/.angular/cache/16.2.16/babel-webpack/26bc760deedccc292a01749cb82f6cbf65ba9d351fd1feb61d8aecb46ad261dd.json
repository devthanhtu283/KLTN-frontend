{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet TestComponent = class TestComponent {\n  constructor(route, testService, questionService, testHistoryService, userService, router) {\n    this.route = route;\n    this.testService = testService;\n    this.questionService = questionService;\n    this.testHistoryService = testHistoryService;\n    this.userService = userService;\n    this.router = router;\n    this.now = 0;\n    this.selectedOptions = {};\n    this.textAnswers = {};\n    this.errorMsg = '';\n    this.showResultPage = false;\n    this.userScore = 0;\n    this.maxScore = 0;\n    this.passingScore = 80;\n    this.steps = [];\n    this.startTest = false; // Biến kiểm soát hiển thị màn hình hướng dẫn\n    this.timeLeft = 30 * 60; // Thời gian làm bài: 30 phút (tính bằng giây)\n  }\n\n  ngOnInit() {\n    const userEmail = localStorage.getItem('userEmail');\n    console.log(userEmail);\n    if (userEmail == null) {\n      setTimeout(() => {\n        this.router.navigate(['/code']);\n      }, 1000);\n    }\n    this.userService.findByEmail(userEmail).then(res => {\n      console.log(res);\n      this.userID = res.data.id;\n      console.log(this.userID);\n    });\n    this.route.paramMap.subscribe(params => {\n      this.code = params.get('code');\n    });\n    this.testService.findTestByCode(this.code).then(res => {\n      console.log(res);\n      this.title = res.data.title;\n      this.companyName = res.data.username;\n      this.questionService.findByTestID(res.data.id).then(result => {\n        this.steps = result;\n        console.log(result);\n        this.totalSteps = this.steps.length;\n        this.maxScore = this.steps.filter(step => step.questionType === 'choiceAnswer').length * 20;\n        console.log(this.maxScore);\n        this.testID = res.data.id;\n        console.log('testID: ' + this.testID);\n      });\n    });\n  }\n  // Bắt đầu đếm ngược thời gian\n  startTimer() {\n    this.timerInterval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.timerInterval);\n        this.calculateScore(); // Tự động tính điểm khi hết giờ\n      }\n    }, 1000);\n  }\n  // Định dạng thời gian thành phút:giây\n  formatTime(seconds) {\n    const minutes = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${minutes}:${secs < 10 ? '0' : ''}${secs}`;\n  }\n  // Các phương thức khác giữ nguyên\n  getCurrentStep() {\n    return this.steps[this.now];\n  }\n  validate(stepId) {\n    const currentStep = this.steps[stepId - 1];\n    if (currentStep.questionType === 'choiceAnswer' && !this.selectedOptions[stepId]) {\n      this.errorMsg = 'Hãy chọn đáp án';\n      return false;\n    } else if (currentStep.questionType === 'textAnswer' && !this.textAnswers[stepId]) {\n      this.errorMsg = 'Hãy điền câu trả lời!';\n      return false;\n    }\n    this.errorMsg = '';\n    return true;\n  }\n  nextStep() {\n    if (this.validate(this.now + 1)) {\n      this.now = this.now + 1;\n    }\n    if (this.now === this.totalSteps) {\n      this.calculateScore();\n    }\n  }\n  prevStep() {\n    if (this.now > 0) {\n      this.now = this.now - 1;\n    }\n  }\n  calculateScore() {\n    this.userScore = 0;\n    var i = 0;\n    console.log(this.steps);\n    this.steps.forEach(step => {\n      i++;\n      if (step.questionType === 'choiceAnswer') {\n        console.log(this.selectedOptions[i]);\n        const selectedAnswer = this.selectedOptions[i];\n        const correctAnswer = step.answers.find(answer => answer.correct);\n        console.log(selectedAnswer);\n        console.log(correctAnswer);\n        if (selectedAnswer === correctAnswer?.content) {\n          this.userScore += 20;\n        }\n      }\n    });\n    this.showResultPage = true;\n    clearInterval(this.timerInterval); // Dừng đếm ngược khi tính điểm\n    var contentAnswerText = Object.entries(this.textAnswers).map(([stepId, answer]) => `Câu ${stepId}: ${answer}`).join(' | ');\n    var testHistory = {\n      userID: this.userID,\n      testID: this.testID,\n      score: this.userScore,\n      contentAnswer: contentAnswerText\n    };\n    console.log(testHistory);\n    this.testHistoryService.save(testHistory).then(res => {\n      console.log(res);\n    });\n  }\n  onOptionSelected(stepId, option) {\n    this.selectedOptions[stepId] = option;\n    console.log(this.selectedOptions[stepId]);\n  }\n  onTextAnswerChange(stepId, answer) {\n    this.textAnswers[stepId] = answer;\n    console.log(this.textAnswers);\n  }\n  isPassed() {\n    return this.userScore / this.maxScore * 100 >= this.passingScore;\n  }\n  goToJobWeb() {\n    // Thay thế URL bằng đường dẫn đến trang web công việc của bạn\n    window.location.href = 'https://yourjobwebsite.com';\n  }\n};\nTestComponent = __decorate([Component({\n  templateUrl: './test.component.html',\n  styleUrls: ['./test.component.css']\n})], TestComponent);\nexport { TestComponent };","map":{"version":3,"names":["Component","TestComponent","constructor","route","testService","questionService","testHistoryService","userService","router","now","selectedOptions","textAnswers","errorMsg","showResultPage","userScore","maxScore","passingScore","steps","startTest","timeLeft","ngOnInit","userEmail","localStorage","getItem","console","log","setTimeout","navigate","findByEmail","then","res","userID","data","id","paramMap","subscribe","params","code","get","findTestByCode","title","companyName","username","findByTestID","result","totalSteps","length","filter","step","questionType","testID","startTimer","timerInterval","setInterval","clearInterval","calculateScore","formatTime","seconds","minutes","Math","floor","secs","getCurrentStep","validate","stepId","currentStep","nextStep","prevStep","i","forEach","selectedAnswer","correctAnswer","answers","find","answer","correct","content","contentAnswerText","Object","entries","map","join","testHistory","score","contentAnswer","save","onOptionSelected","option","onTextAnswerChange","isPassed","goToJobWeb","window","location","href","__decorate","templateUrl","styleUrls"],"sources":["D:\\kltn\\src\\KLTN-frontend\\quiz\\src\\app\\components\\test\\test.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Test } from 'src/app/models/test.model';\r\nimport { QuestionService } from 'src/app/services/question.service';\r\nimport { TestService } from 'src/app/services/test.service';\r\nimport { TestHistoryService } from 'src/app/services/testHistory.service';\r\nimport { UserService } from 'src/app/services/user.service';\r\n\r\n@Component({\r\n  templateUrl: './test.component.html',\r\n  styleUrls: ['./test.component.css'],\r\n})\r\nexport class TestComponent implements OnInit {\r\n  now: number = 0;\r\n  totalSteps: number;\r\n  selectedOptions: any = {};\r\n  textAnswers: any = {};\r\n  errorMsg: string = '';\r\n  showResultPage: boolean = false;\r\n  userScore: number = 0;\r\n  maxScore: number = 0;\r\n  passingScore: number = 80;\r\n  code: string;\r\n  test: Test;\r\n  title: string;\r\n  companyName: string;\r\n  steps = [];\r\n  startTest: boolean = false; // Biến kiểm soát hiển thị màn hình hướng dẫn\r\n  timeLeft: number = 30 * 60; // Thời gian làm bài: 30 phút (tính bằng giây)\r\n  timerInterval: any; // Biến lưu interval của timer\r\n  userID: number;\r\n  testID: number;\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private testService: TestService,\r\n    private questionService: QuestionService,\r\n    private testHistoryService: TestHistoryService,\r\n    private userService: UserService,\r\n      private router: Router,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    const userEmail = localStorage.getItem('userEmail');\r\n    console.log(userEmail);\r\n    if(userEmail == null){\r\n      setTimeout(() => {\r\n        this.router.navigate(['/code']);\r\n      }, 1000);\r\n    }\r\n    this.userService.findByEmail(userEmail).then((res) => {\r\n      console.log(res);\r\n      this.userID = res.data.id;\r\n      console.log(this.userID);\r\n    });\r\n\r\n    this.route.paramMap.subscribe((params) => {\r\n      this.code = params.get('code');\r\n    });\r\n\r\n    this.testService.findTestByCode(this.code).then((res) => {\r\n      console.log(res);\r\n      this.title = res.data.title;\r\n      this.companyName = res.data.username;\r\n      this.questionService.findByTestID(res.data.id).then((result) => {\r\n        this.steps = result;\r\n        console.log(result);\r\n        this.totalSteps = this.steps.length;\r\n        this.maxScore =\r\n          this.steps.filter((step) => step.questionType === 'choiceAnswer')\r\n            .length * 20;\r\n        console.log(this.maxScore);\r\n        this.testID = res.data.id;\r\n        console.log('testID: ' + this.testID);\r\n      });\r\n    });\r\n  }\r\n\r\n  // Bắt đầu đếm ngược thời gian\r\n  startTimer() {\r\n    this.timerInterval = setInterval(() => {\r\n      if (this.timeLeft > 0) {\r\n        this.timeLeft--;\r\n      } else {\r\n        clearInterval(this.timerInterval);\r\n        this.calculateScore(); // Tự động tính điểm khi hết giờ\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  // Định dạng thời gian thành phút:giây\r\n  formatTime(seconds: number): string {\r\n    const minutes = Math.floor(seconds / 60);\r\n    const secs = seconds % 60;\r\n    return `${minutes}:${secs < 10 ? '0' : ''}${secs}`;\r\n  }\r\n\r\n  // Các phương thức khác giữ nguyên\r\n  getCurrentStep() {\r\n    return this.steps[this.now];\r\n  }\r\n\r\n  validate(stepId: number): boolean {\r\n    const currentStep = this.steps[stepId - 1];\r\n    if (\r\n      currentStep.questionType === 'choiceAnswer' &&\r\n      !this.selectedOptions[stepId]\r\n    ) {\r\n      this.errorMsg = 'Hãy chọn đáp án';\r\n      return false;\r\n    } else if (\r\n      currentStep.questionType === 'textAnswer' &&\r\n      !this.textAnswers[stepId]\r\n    ) {\r\n      this.errorMsg = 'Hãy điền câu trả lời!';\r\n      return false;\r\n    }\r\n    this.errorMsg = '';\r\n    return true;\r\n  }\r\n\r\n  nextStep() {\r\n    if (this.validate(this.now + 1)) {\r\n      this.now = this.now + 1;\r\n    }\r\n    if (this.now === this.totalSteps) {\r\n      this.calculateScore();\r\n    }\r\n  }\r\n\r\n  prevStep() {\r\n    if (this.now > 0) {\r\n      this.now = this.now - 1;\r\n    }\r\n  }\r\n\r\n  calculateScore() {\r\n    this.userScore = 0;\r\n    var i = 0;\r\n    console.log(this.steps);\r\n    this.steps.forEach((step) => {\r\n      i++;\r\n      if (step.questionType === 'choiceAnswer') {\r\n        console.log(this.selectedOptions[i]);\r\n        const selectedAnswer = this.selectedOptions[i];\r\n        const correctAnswer = step.answers.find((answer) => answer.correct);\r\n        console.log(selectedAnswer);\r\n        console.log(correctAnswer);\r\n        if (selectedAnswer === correctAnswer?.content) {\r\n          this.userScore += 20;\r\n        }\r\n      }\r\n    });\r\n    this.showResultPage = true;\r\n    clearInterval(this.timerInterval); // Dừng đếm ngược khi tính điểm\r\n    var contentAnswerText = Object.entries(this.textAnswers)\r\n      .map(([stepId, answer]) => `Câu ${stepId}: ${answer}`)\r\n      .join(' | ');\r\n\r\n    var testHistory = {\r\n      userID: this.userID,\r\n      testID: this.testID,\r\n      score: this.userScore,\r\n      contentAnswer: contentAnswerText,\r\n    };\r\n\r\n    console.log(testHistory);\r\n    this.testHistoryService.save(testHistory).then((res) => {\r\n      console.log(res);\r\n    });\r\n  }\r\n\r\n  onOptionSelected(stepId: number, option: string) {\r\n    this.selectedOptions[stepId] = option;\r\n    console.log(this.selectedOptions[stepId]);\r\n  }\r\n\r\n  onTextAnswerChange(stepId: number, answer: string) {\r\n    this.textAnswers[stepId] = answer;\r\n    console.log(this.textAnswers);\r\n  }\r\n\r\n  isPassed() {\r\n    return (this.userScore / this.maxScore) * 100 >= this.passingScore;\r\n  }\r\n  goToJobWeb() {\r\n    // Thay thế URL bằng đường dẫn đến trang web công việc của bạn\r\n    window.location.href = 'https://yourjobwebsite.com';\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}