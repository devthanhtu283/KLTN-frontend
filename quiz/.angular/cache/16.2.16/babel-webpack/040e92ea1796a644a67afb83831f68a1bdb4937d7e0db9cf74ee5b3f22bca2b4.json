{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nlet TestComponent = class TestComponent {\n  constructor(route, testService, questionService) {\n    this.route = route;\n    this.testService = testService;\n    this.questionService = questionService;\n    this.now = 0;\n    this.selectedOptions = {};\n    this.textAnswers = {};\n    this.errorMsg = '';\n    this.showResultPage = false;\n    this.userScore = 0;\n    this.maxScore = 0;\n    this.passingScore = 80;\n    this.steps = [];\n  }\n  ngOnInit() {\n    this.route.paramMap.subscribe(params => {\n      this.code = params.get('code');\n    });\n    this.testService.findTestByCode(this.code).then(res => {\n      this.title = res.title;\n      this.questionService.findByTestID(res.id).then(result => {\n        this.steps = result;\n        console.log(result);\n        this.totalSteps = this.steps.length;\n        this.maxScore = this.steps.filter(step => step.questionType === 'choiceAnswer').length * 20;\n        console.log(this.maxScore);\n      });\n    });\n  }\n  getCurrentStep() {\n    return this.steps[this.now];\n  }\n  validate(stepId) {\n    const currentStep = this.steps[stepId - 1];\n    if (currentStep.questionType === 'choiceAnswer' && !this.selectedOptions[stepId]) {\n      this.errorMsg = 'Please select an answer!';\n      return false;\n    } else if (currentStep.questionType === 'textAnswer' && !this.textAnswers[stepId]) {\n      this.errorMsg = 'Please provide an answer!';\n      return false;\n    }\n    this.errorMsg = '';\n    return true;\n  }\n  nextStep() {\n    if (this.validate(this.now + 1)) {\n      this.now = this.now + 1;\n    }\n    if (this.now === this.totalSteps) {\n      this.calculateScore();\n    }\n  }\n  prevStep() {\n    if (this.now > 0) {\n      this.now = this.now - 1;\n    }\n  }\n  calculateScore() {\n    this.userScore = 0;\n    var i = 0;\n    console.log(this.steps);\n    this.steps.forEach(step => {\n      i++;\n      if (step.questionType === 'choiceAnswer') {\n        console.log(this.selectedOptions[i]);\n        const selectedAnswer = this.selectedOptions[i];\n        const correctAnswer = step.answers.find(answer => answer.correct);\n        console.log(selectedAnswer);\n        console.log(correctAnswer);\n        if (selectedAnswer === correctAnswer?.content) {\n          this.userScore += 20;\n        }\n      }\n    });\n    this.showResultPage = true;\n  }\n  onOptionSelected(stepId, option) {\n    this.selectedOptions[stepId] = option;\n    console.log(this.selectedOptions[stepId]);\n  }\n  onTextAnswerChange(stepId, answer) {\n    this.textAnswers[stepId] = answer;\n  }\n  isPassed() {\n    return this.userScore >= this.passingScore;\n  }\n};\nTestComponent = __decorate([Component({\n  templateUrl: \"./test.component.html\"\n})], TestComponent);\nexport { TestComponent };","map":{"version":3,"names":["Component","TestComponent","constructor","route","testService","questionService","now","selectedOptions","textAnswers","errorMsg","showResultPage","userScore","maxScore","passingScore","steps","ngOnInit","paramMap","subscribe","params","code","get","findTestByCode","then","res","title","findByTestID","id","result","console","log","totalSteps","length","filter","step","questionType","getCurrentStep","validate","stepId","currentStep","nextStep","calculateScore","prevStep","i","forEach","selectedAnswer","correctAnswer","answers","find","answer","correct","content","onOptionSelected","option","onTextAnswerChange","isPassed","__decorate","templateUrl"],"sources":["D:\\kltn\\fe\\user\\src\\app\\components\\test\\test.component.ts"],"sourcesContent":["import { Component, OnInit } from \"@angular/core\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { Test } from \"src/app/models/test.model\";\r\nimport { QuestionService } from \"src/app/services/question.service\";\r\nimport { TestService } from \"src/app/services/test.service\";\r\n@Component({\r\n    templateUrl: \"./test.component.html\"\r\n})\r\nexport class TestComponent implements OnInit{\r\n  \r\n   \r\n    now: number = 0; \r\n    totalSteps: number;\r\n    selectedOptions: any = {}; \r\n    textAnswers: any = {}; \r\n    errorMsg: string = '';\r\n    showResultPage: boolean = false;\r\n    userScore: number = 0; \r\n    maxScore: number = 0; \r\n    passingScore: number = 80; \r\n    code: string;\r\n    test: Test;\r\n    title: string;\r\n\r\n    steps = [];\r\n  \r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private testService: TestService,\r\n        private questionService: QuestionService\r\n    ) {\r\n     \r\n    \r\n    }\r\n    ngOnInit(): void {\r\n        this.route.paramMap.subscribe(params => {\r\n            this.code = params.get('code'); \r\n          });\r\n        \r\n        this.testService.findTestByCode(this.code).then(\r\n            res => {\r\n                this.title = res.title;\r\n                this.questionService.findByTestID(res.id).then(\r\n                  result => {\r\n                      this.steps = result;\r\n                      console.log(result);\r\n                      this.totalSteps = this.steps.length;\r\n                      this.maxScore = this.steps.filter(step => step.questionType === 'choiceAnswer').length * 20;\r\n                      console.log(this.maxScore);\r\n                  }\r\n              );\r\n                \r\n            }\r\n        );\r\n       \r\n        \r\n    }\r\n\r\n    getCurrentStep() {\r\n      return this.steps[this.now];\r\n    }\r\n  \r\n\r\n    validate(stepId: number): boolean {\r\n      const currentStep = this.steps[stepId - 1];\r\n      if (currentStep.questionType === 'choiceAnswer' && !this.selectedOptions[stepId]) {\r\n        this.errorMsg = 'Please select an answer!';\r\n        return false;\r\n      } else if (currentStep.questionType === 'textAnswer' && !this.textAnswers[stepId]) {\r\n        this.errorMsg = 'Please provide an answer!';\r\n        return false;\r\n      }\r\n      this.errorMsg = '';\r\n      return true;\r\n    }\r\n  \r\n\r\n    nextStep() {\r\n      if (this.validate(this.now + 1)) {\r\n        this.now = this.now + 1;\r\n      }\r\n      if (this.now === this.totalSteps) {\r\n        this.calculateScore();\r\n      }\r\n    }\r\n\r\n    prevStep() {\r\n      if (this.now > 0) {\r\n        this.now = this.now - 1;\r\n      }\r\n    }\r\n  \r\n\r\n    calculateScore() {\r\n      this.userScore = 0;\r\n      var i = 0;\r\n      console.log(this.steps);\r\n      this.steps.forEach((step) => {\r\n        i++;\r\n        if (step.questionType === 'choiceAnswer') {\r\n          console.log(this.selectedOptions[i]);\r\n          const selectedAnswer = this.selectedOptions[i];\r\n          const correctAnswer = step.answers.find(answer => answer.correct);\r\n          console.log(selectedAnswer);\r\n          console.log(correctAnswer);\r\n          if (selectedAnswer === correctAnswer?.content) {\r\n            this.userScore += 20; \r\n          }\r\n        }\r\n      });\r\n      this.showResultPage = true;\r\n    }\r\n  \r\n\r\n    onOptionSelected(stepId: number, option: string) {\r\n      this.selectedOptions[stepId] = option;\r\n      console.log(this.selectedOptions[stepId]);\r\n    }\r\n  \r\n\r\n    onTextAnswerChange(stepId: number, answer: string) {\r\n      this.textAnswers[stepId] = answer;\r\n    }\r\n  \r\n\r\n    isPassed() {\r\n      return this.userScore >= this.passingScore;\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}