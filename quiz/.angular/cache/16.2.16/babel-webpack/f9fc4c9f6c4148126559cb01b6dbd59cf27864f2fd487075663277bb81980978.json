{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nlet TestComponent = class TestComponent {\n  ngOnInit() {}\n  constructor(route) {\n    this.route = route;\n    this.now = 0; // Biến để điều khiển câu hỏi hiện tại\n    this.selectedOptions = {}; // Lưu trữ các giá trị đã chọn cho các câu hỏi có đáp án\n    this.textAnswers = {}; // Lưu trữ câu trả lời cho các câu hỏi dạng textAnswer\n    this.errorMsg = '';\n    this.showResultPage = false;\n    this.userScore = 0; // Lưu điểm số của người dùng\n    this.maxScore = 0; // Tổng điểm tối đa có thể đạt được\n    this.passingScore = 80; // Mức điểm để đậu (pass)\n    // Nội dung câu hỏi được quản lý trong mảng\n    this.steps = [{\n      id: 1,\n      testID: 101,\n      questionType: 'choiceAnswer',\n      content: 'Which former British colony was given back to China in 1997?',\n      choiceAnswers: [{\n        id: 1,\n        content: 'Russia',\n        isCorrect: false\n      }, {\n        id: 2,\n        content: 'America',\n        isCorrect: false\n      }, {\n        id: 3,\n        content: 'Australia',\n        isCorrect: false\n      }, {\n        id: 4,\n        content: 'Hong Kong',\n        isCorrect: true\n      }]\n    }, {\n      id: 2,\n      testID: 101,\n      questionType: 'choiceAnswer',\n      content: 'For which of the following disciplines is Nobel Prize awarded?',\n      choiceAnswers: [{\n        id: 1,\n        content: 'Physics and Chemistry',\n        isCorrect: true\n      }, {\n        id: 2,\n        content: 'Physiology or Medicine',\n        isCorrect: false\n      }, {\n        id: 3,\n        content: 'Literature Economics',\n        isCorrect: false\n      }, {\n        id: 4,\n        content: 'All of the above',\n        isCorrect: false\n      }]\n    }, {\n      id: 3,\n      testID: 101,\n      questionType: 'textAnswer',\n      content: 'Explain the significance of fire temples in Zoroastrianism.'\n    }, {\n      id: 4,\n      testID: 102,\n      questionType: 'choiceAnswer',\n      content: 'Who was the first Indian Commander-in-Chief (C-in-C) of the Indian Army?',\n      choiceAnswers: [{\n        id: 1,\n        content: 'Gen. K.M. Cariappa',\n        isCorrect: true\n      }, {\n        id: 2,\n        content: 'Vice-Admiral R.D. Katari',\n        isCorrect: false\n      }, {\n        id: 3,\n        content: 'Rajendra Singhji',\n        isCorrect: false\n      }, {\n        id: 4,\n        content: 'None of the above',\n        isCorrect: false\n      }]\n    }, {\n      id: 5,\n      testID: 102,\n      questionType: 'textAnswer',\n      content: 'Describe the process of galvanizing iron.'\n    }];\n    this.totalSteps = this.steps.length;\n    this.maxScore = this.steps.filter(step => step.questionType === 'choiceAnswer').length * 20;\n  }\n  // Hiển thị câu hỏi hiện tại\n  getCurrentStep() {\n    return this.steps[this.now];\n  }\n  // Xác thực xem có chọn đáp án hoặc nhập câu trả lời không\n  validate(stepId) {\n    const currentStep = this.steps[stepId - 1];\n    if (currentStep.questionType === 'choiceAnswer' && !this.selectedOptions[stepId]) {\n      this.errorMsg = 'Please select an answer!';\n      return false;\n    } else if (currentStep.questionType === 'textAnswer' && !this.textAnswers[stepId]) {\n      this.errorMsg = 'Please provide an answer!';\n      return false;\n    }\n    this.errorMsg = ''; // Reset lỗi nếu có\n    return true;\n  }\n  // Chuyển đến câu tiếp theo\n  nextStep() {\n    if (this.validate(this.now + 1)) {\n      this.now = this.now + 1;\n    }\n    if (this.now === this.totalSteps) {\n      this.calculateScore();\n    }\n  }\n  // Trở lại câu trước\n  prevStep() {\n    if (this.now > 0) {\n      this.now = this.now - 1;\n    }\n  }\n  // Tính điểm dựa trên các câu trả lời đúng cho các câu hỏi có đáp án\n  calculateScore() {\n    this.userScore = 0;\n    this.steps.forEach(step => {\n      if (step.questionType === 'choiceAnswer') {\n        const selectedAnswer = this.selectedOptions[step.id];\n        const correctAnswer = step.choiceAnswers.find(answer => answer.isCorrect);\n        if (selectedAnswer === correctAnswer?.content) {\n          this.userScore += 20; // Mỗi câu đúng được 20 điểm\n        }\n      }\n    });\n\n    this.showResultPage = true;\n  }\n  // Phương thức chọn radio option\n  onOptionSelected(stepId, option) {\n    this.selectedOptions[stepId] = option;\n  }\n  // Phương thức nhập câu trả lời cho câu hỏi textAnswer\n  onTextAnswerChange(stepId, answer) {\n    this.textAnswers[stepId] = answer;\n  }\n  // Kiểm tra xem kết quả có đạt không\n  isPassed() {\n    return this.userScore >= this.passingScore;\n  }\n};\nTestComponent = __decorate([Component({\n  templateUrl: \"./test.component.html\"\n})], TestComponent);\nexport { TestComponent };","map":{"version":3,"names":["Component","TestComponent","ngOnInit","constructor","route","now","selectedOptions","textAnswers","errorMsg","showResultPage","userScore","maxScore","passingScore","steps","id","testID","questionType","content","choiceAnswers","isCorrect","totalSteps","length","filter","step","getCurrentStep","validate","stepId","currentStep","nextStep","calculateScore","prevStep","forEach","selectedAnswer","correctAnswer","find","answer","onOptionSelected","option","onTextAnswerChange","isPassed","__decorate","templateUrl"],"sources":["D:\\kltn\\fe\\user\\src\\app\\components\\test\\test.component.ts"],"sourcesContent":["import { Component, OnInit } from \"@angular/core\";\r\n@Component({\r\n    templateUrl: \"./test.component.html\"\r\n})\r\nexport class TestComponent implements OnInit{\r\n  \r\n    ngOnInit(): void {\r\n        \r\n    }\r\n    now: number = 0; // Biến để điều khiển câu hỏi hiện tại\r\n    totalSteps: number;\r\n    selectedOptions: any = {}; // Lưu trữ các giá trị đã chọn cho các câu hỏi có đáp án\r\n    textAnswers: any = {}; // Lưu trữ câu trả lời cho các câu hỏi dạng textAnswer\r\n    errorMsg: string = '';\r\n    showResultPage: boolean = false;\r\n    userScore: number = 0; // Lưu điểm số của người dùng\r\n    maxScore: number = 0; // Tổng điểm tối đa có thể đạt được\r\n    passingScore: number = 80; // Mức điểm để đậu (pass)\r\n  \r\n    // Nội dung câu hỏi được quản lý trong mảng\r\n    steps = [\r\n      {\r\n        id: 1,\r\n        testID: 101,\r\n        questionType: 'choiceAnswer',\r\n        content: 'Which former British colony was given back to China in 1997?',\r\n        choiceAnswers: [\r\n          { id: 1, content: 'Russia', isCorrect: false },\r\n          { id: 2, content: 'America', isCorrect: false },\r\n          { id: 3, content: 'Australia', isCorrect: false },\r\n          { id: 4, content: 'Hong Kong', isCorrect: true }\r\n        ]\r\n      },\r\n      {\r\n        id: 2,\r\n        testID: 101,\r\n        questionType: 'choiceAnswer',\r\n        content: 'For which of the following disciplines is Nobel Prize awarded?',\r\n        choiceAnswers: [\r\n          { id: 1, content: 'Physics and Chemistry', isCorrect: true },\r\n          { id: 2, content: 'Physiology or Medicine', isCorrect: false },\r\n          { id: 3, content: 'Literature Economics', isCorrect: false },\r\n          { id: 4, content: 'All of the above', isCorrect: false }\r\n        ]\r\n      },\r\n      {\r\n        id: 3,\r\n        testID: 101,\r\n        questionType: 'textAnswer',\r\n        content: 'Explain the significance of fire temples in Zoroastrianism.',\r\n      },\r\n      {\r\n        id: 4,\r\n        testID: 102,\r\n        questionType: 'choiceAnswer',\r\n        content: 'Who was the first Indian Commander-in-Chief (C-in-C) of the Indian Army?',\r\n        choiceAnswers: [\r\n          { id: 1, content: 'Gen. K.M. Cariappa', isCorrect: true },\r\n          { id: 2, content: 'Vice-Admiral R.D. Katari', isCorrect: false },\r\n          { id: 3, content: 'Rajendra Singhji', isCorrect: false },\r\n          { id: 4, content: 'None of the above', isCorrect: false }\r\n        ]\r\n      },\r\n      {\r\n        id: 5,\r\n        testID: 102,\r\n        questionType: 'textAnswer',\r\n        content: 'Describe the process of galvanizing iron.',\r\n      }\r\n    ];\r\n  \r\n    constructor(\r\n        private route: ActivatedRoute\r\n    ) {\r\n      this.totalSteps = this.steps.length;\r\n      this.maxScore = this.steps.filter(step => step.questionType === 'choiceAnswer').length * 20;\r\n    \r\n    }\r\n  \r\n    // Hiển thị câu hỏi hiện tại\r\n    getCurrentStep() {\r\n      return this.steps[this.now];\r\n    }\r\n  \r\n    // Xác thực xem có chọn đáp án hoặc nhập câu trả lời không\r\n    validate(stepId: number): boolean {\r\n      const currentStep = this.steps[stepId - 1];\r\n      if (currentStep.questionType === 'choiceAnswer' && !this.selectedOptions[stepId]) {\r\n        this.errorMsg = 'Please select an answer!';\r\n        return false;\r\n      } else if (currentStep.questionType === 'textAnswer' && !this.textAnswers[stepId]) {\r\n        this.errorMsg = 'Please provide an answer!';\r\n        return false;\r\n      }\r\n      this.errorMsg = ''; // Reset lỗi nếu có\r\n      return true;\r\n    }\r\n  \r\n    // Chuyển đến câu tiếp theo\r\n    nextStep() {\r\n      if (this.validate(this.now + 1)) {\r\n        this.now = this.now + 1;\r\n      }\r\n      if (this.now === this.totalSteps) {\r\n        this.calculateScore();\r\n      }\r\n    }\r\n  \r\n    // Trở lại câu trước\r\n    prevStep() {\r\n      if (this.now > 0) {\r\n        this.now = this.now - 1;\r\n      }\r\n    }\r\n  \r\n    // Tính điểm dựa trên các câu trả lời đúng cho các câu hỏi có đáp án\r\n    calculateScore() {\r\n      this.userScore = 0;\r\n      this.steps.forEach((step) => {\r\n        if (step.questionType === 'choiceAnswer') {\r\n          const selectedAnswer = this.selectedOptions[step.id];\r\n          const correctAnswer = step.choiceAnswers.find(answer => answer.isCorrect);\r\n          if (selectedAnswer === correctAnswer?.content) {\r\n            this.userScore += 20; // Mỗi câu đúng được 20 điểm\r\n          }\r\n        }\r\n      });\r\n      this.showResultPage = true;\r\n    }\r\n  \r\n    // Phương thức chọn radio option\r\n    onOptionSelected(stepId: number, option: string) {\r\n      this.selectedOptions[stepId] = option;\r\n    }\r\n  \r\n    // Phương thức nhập câu trả lời cho câu hỏi textAnswer\r\n    onTextAnswerChange(stepId: number, answer: string) {\r\n      this.textAnswers[stepId] = answer;\r\n    }\r\n  \r\n    // Kiểm tra xem kết quả có đạt không\r\n    isPassed() {\r\n      return this.userScore >= this.passingScore;\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}